name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Do you also want to run the terraform apply?'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION }}" 
        project="${{ vars.GCP_PROJECT_ID }}" 
        project_name="${{ vars.PROJECT_NAME }}"
        EOF
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CRED }} 


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CRED }}

    - name: Terraform Apply
      if: ${{ github.event.inputs.deploy == 'true' }}  # Conditional step
      run: terraform destroy -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CRED }}
